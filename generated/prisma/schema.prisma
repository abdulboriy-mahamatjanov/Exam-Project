// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Regions {
  id        String   @id @default(uuid())
  nameUz    String
  nameRu    String
  nameEn    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Users     Users[]
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  VIEWER_ADMIN
  USER_FIZ
  USER_YUR
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model Users {
  id        String     @id @default(uuid())
  fullName  String
  phone     String     @unique
  password  String
  role      UserRole
  status    UserStatus @default(INACTIVE)
  avatar    String
  regionId  String
  region    Regions    @relation(fields: [regionId], references: [id], onDelete: Restrict)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Backet    Backet[]
  Comments  Comments[]
  Sessions  Sessions[]
}

model Sessions {
  id         String   @id @default(uuid())
  userId     String
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress  String
  deviceInfo Json
  createdAt  DateTime @default(now())
}

model Contacts {
  id        String   @id @default(uuid())
  name      String
  surName   String
  phone     String   @unique
  address   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DataAboutCompany {
  id        String   @id @default(uuid())
  INN       String
  MFO       String
  R_or_C    String
  bankCode  String
  Oked      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShowCases {
  id            String   @id @default(uuid())
  nameUz        String
  nameRu        String
  nameEn        String
  descriptionUz String
  descriptionRu String
  descriptionEn String
  image         String
  link          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AboutOurPage {
  id        String   @id @default(uuid())
  email     String   @unique
  phone     String   @unique
  links     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Partners {
  id        String   @id @default(uuid())
  nameUz    String
  nameRu    String
  nameEn    String
  images    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id        String   @id @default(uuid())
  message   String
  userId    String
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Orders    Orders[]
}

model Stars {
  id        String   @id @default(uuid())
  star      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Levels {
  id                String              @id @default(uuid())
  nameUz            String
  nameRu            String
  nameEn            String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  MasterProfessions MasterProfessions[]
  Backet            Backet[]
  OrderItems        OrderItems[]
  ProfessionLevels  ProfessionLevels[]
}

model Capacity {
  id        String   @id @default(uuid())
  nameUz    String
  nameRu    String
  nameEn    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tools     Tools[]
}

model Sizes {
  id        String   @id @default(uuid())
  nameUz    String
  nameRu    String
  nameEn    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tools     Tools[]
}

model Brands {
  id        String   @id @default(uuid())
  nameUz    String
  nameRu    String
  nameEn    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tools     Tools[]
}

model Masters {
  id                String              @id @default(uuid())
  fullName          String
  phone             String              @unique
  status            Boolean
  birthYear         Int
  avatar            String
  passportImage     String
  about             String
  MasterProfessions MasterProfessions[]
}

model Professions {
  id                String              @id @default(uuid())
  nameUz            String
  nameRu            String
  nameEn            String
  avatar            String
  status            Boolean
  MasterProfessions MasterProfessions[]
  Backet            Backet[]
  OrderItems        OrderItems[]
  ProfessionLevels  ProfessionLevels[]
  ProfessionTools   ProfessionTools[]
}

model MasterProfessions {
  id              String      @id @default(uuid())
  professionId    String
  profession      Professions @relation(fields: [professionId], references: [id])
  minWorkingHours Int
  levelId         String
  level           Levels      @relation(fields: [levelId], references: [id])
  priceHourly     Decimal
  priceDaily      Decimal
  experience      String
  masterId        String
  master          Masters     @relation(fields: [masterId], references: [id], onDelete: Cascade)
}

model ProfessionLevels {
  id              String      @id @default(uuid())
  professionId    String
  profession      Professions @relation(fields: [professionId], references: [id])
  levelId         String
  level           Levels      @relation(fields: [levelId], references: [id])
  minWorkingHours Int
  priceHourly     Decimal
  priceDaily      Decimal
}

model Tools {
  id              String            @id @default(uuid())
  code            String            @unique
  nameUz          String
  nameRu          String
  nameEn          String
  descriptionUz   String
  descriptionRu   String
  descriptionEn   String
  price           Decimal
  quantity        Int
  brandId         String
  brand           Brands            @relation(fields: [brandId], references: [id])
  capacityId      String
  capacity        Capacity          @relation(fields: [capacityId], references: [id])
  sizeId          String
  size            Sizes             @relation(fields: [sizeId], references: [id])
  image           String
  isAvailable     Boolean
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Backet          Backet[]
  OrderItems      OrderItems[]
  ProfessionTools ProfessionTools[]
}

model ProfessionTools {
  id           String      @id @default(uuid())
  professionId String
  professions  Professions @relation(fields: [professionId], references: [id], onDelete: Restrict)
  toolId       String
  tools        Tools       @relation(fields: [toolId], references: [id])
}

enum timeEnum {
  DAY
  HOUR
}

model Backet {
  id           String      @id @default(uuid())
  ownerId      String
  owner        Users       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  professionId String
  profession   Professions @relation(fields: [professionId], references: [id], onDelete: Restrict)
  toolId       String
  tools        Tools       @relation(fields: [toolId], references: [id], onDelete: Restrict)
  count        Int
  timeUnit     timeEnum
  measure      Int
  workingTime  Int
  totalPrice   Decimal
  levelId      String
  level        Levels      @relation(fields: [levelId], references: [id], onDelete: Restrict)
}

enum PaymentType {
  CARD
  CASH
}

enum OrderStatus {
  PENDING
  ACTIVATED
  REJECTED
}

model Orders {
  id                String       @id @default(uuid())
  ownerId           String
  address           String
  latitude          String
  longitude         String
  date              DateTime
  totalPrice        Decimal
  paymentType       PaymentType
  withDelivery      Boolean
  status            OrderStatus
  deliveryCommentId String?
  deliveryComment   Comments?    @relation(fields: [deliveryCommentId], references: [id], onDelete: SetNull)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  OrderItems        OrderItems[]
}

enum OrderItemMeasure {
  DAY
  HOUR
}

model OrderItems {
  id           String           @id @default(uuid())
  orderId      String
  order        Orders           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  professionId String
  profession   Professions      @relation(fields: [professionId], references: [id], onDelete: Restrict)
  toolId       String
  tool         Tools            @relation(fields: [toolId], references: [id])
  levelId      String
  level        Levels           @relation(fields: [levelId], references: [id], onDelete: Restrict)
  measure      OrderItemMeasure
  workingTime  Int
  price        Decimal
  count        Int
}
